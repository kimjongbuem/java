MAC 계층 

LAN 환경에서는 네트워크의 효율적 활용을 위한 데이터링크계층의 기능을 LLC, MAC 계층으로 나누어 처리함.

MAC 계층은 전송 선로의 물리적인 특성을 반영, 여러종류가 있음

이더넷 공유버스 ) 이더넷에서는 데이터를 전송하기 전에 전송 선로를 먼저 확인하여, 다른 호스트가 데이터를 전송 중인지 여부를 파악해야함.
그렇지않고 동시에 데이터 프레임 전송을 시도하면 충돌이 일어남

토큰 링 방식) 토큰이라는 특정 패턴의 제어 데이터가 링을 순환함. 
데이터 프레임을 전송하려면 먼저 토큰을 확보해야함 -> 제어 ( 우선순위 부여 가능 )

LLC 계층
LAN 환경에서 LLC계층은 - 슬라이딩 윈도우 프로토콜 사용함. 단 맥은 안씀

IEEE 802 시리즈

CSMA/CD 802.3//  토큰버스 802.4 // 토큰 링 802.5

2.1 CSMA/CD >>
다중 접근 채널 방식을 이용하여 공유 매체에 프레임을 전송하는 방식임 ,, 충돌가능성 항상 존재함. 

1. 충돌현상 허용 (이더넷의 CSMA/CD )
충돌로 깨진 프레임을 복구하는 작업 필요함. 충돌자주발생하면 복구작업 많아지니 지연오래걸려서 네트워크 성능 쓰레기됨.

2. 충돌회피 방식 ( 타임슬롯 )
각 송신 호스트에 서로 다슨 전송 시간대 지정.

전송 프레임은 버스 구조에 연결된 모든 호스트에게 전송 -> 해당 호스트가 아니라면 DISCARD OR DISMISS 한다. 


2.2 토큰버스
물리적인 구조는 버스형 구조이나, 논리적인 프레임 전달은 링구조임.
순차적으로 사용하기 위해 토큰이라는 제어프레임사용한다.( 전송시 무조건 확보 해야함) , 높은 번호부터 네트웤에 연결 전달도 먼저 이루어진다.


2.3 토큰 링
대기모드: 링네트워크 유지하는 역할만 수행한다. / 전송모드 : 토큰을 얻어서 전송권한을 가져서 논리적인 연결은 끊어지는 대신에, 호스트의 중개를 거쳐서 연결됨.
송신호스트가 전송하는 프레임이 다시 돌아오도록 설계됨.


<2>이더넷 : LAN 환경에서 많이 쓰는 네트워크 기술임.

1 - persistent CSMA/CD방식 LAN 환경에 관해 규정한 표준안이며 공유버스로 연결한 호스트 간의 데이터 전송에 관한 사항을 다룸

공유 버스구조에서 호스트 간의 프레임 충돌을 방지하려면 다른 호스트가 공유버스를 사용하는 지 확인 -> 흐르는 신호=> 신호감지 프로토콜(전송 선로에 흐르는 신호를 감지하여 프레임의 전송 여부를 결정하는 프로토콜)

1.1) 1-persistent CSMA 
신호감지 프로토콜 -> 있다면 대기 (유휴상태될 때 까지) -> 채널 변경시 확률 1의 조건으로 무조건 전송 => 그러나 두개의 호스트가 유휴상태에서 채널이 변경되면 충돌이 일어남.... 그럼 또 반복한다.

1.2) non-persistent CSMA 
신호감지 프로토콜 -> 유휴상태 확인 안하고 임의의 시간 후 다시 감지 시작 ( 이것은 충돌 발생할 확률을 줄일수 있다!) 

1.3) P-persistent CSMA 경우 P확률로 유휴상태 끝나면 P확률로 다시 프레임전송한다는 의미임.

1.4) CSMA/CD 
기본적으로 둘 이상의 호스트에서 동시에 채널의 유휴상태를 확인할 가능성이 있다. 여러 호스트가 동시에 채널을 쓸 수 있다 -> 이 상황이 자주 발생시 충돌 올라감
신호감지 프로토콜 기능 사용
트랜시버는 호스트를 전송 케이블에 연결하기 위한 송수신 장치 + 신호감지 => 충돌방지 => 전송케이블에 다시 전송 (무의미 한 프레임전송억제)
또한 전송 케이블이 너무 길면, 신호 감쇄 현상에 의해 오류가 발생할 가능성이 높아짐.
만약에 호스트가 너무 많다면, 케이블을 2개로 나누어 리피터로 연결하자!(신호증폭)


2- 프레임구조
LLC에서 내려온 프레임을 상대 호스트에 전송하려면 MAC 계층에서 정의된 프레임 구조에 맞게 포장해야함 ( MAC 프레임 : MAC 헤더 + MAC 트레일러정보, 이더넷 프로토콜에선 이더넷 프레임이라 함)
MAC에서는 LLC계층에서 보낸 모든 정보를 전송 데이터로 취급함.(데이터 앞은 헤더 뒤는 트레일러)

CSMA/CD 이더넷 프레임 구조 ) 필드의 단위는 바이트/ SOURCE, Destionation Address 경우 6바이트의 맥주소 사용/ 데이터와 패딩 필드는 가변길이(46~1500) 

1) Premble : 7 바이트 크기임, 수신호스트가 송신호스트의 클럭과 동기를 맞출 수 있게 시간 여유를 제공하는 것이 목적(10101010 비트 패턴)
2) Start Delimiter 시작구분자 : 프레임 시작된 다는 의미임(프리엠블과 구분 위해 10101011) 응 맨끝이 11로 구분해 ^^
3) source(송신) / destination(수신) 주소 : MAC 계층에서는 호스트를 구분하는 고유의 MAC 주소를 사용함. -> 랜카드에 저장
수신 호스트의 경우 최상위 비트가 1이면 그룹 0이면 일반 주소임. EX) 브로드 캐스팅 경우 다 1이다.
4) Length/Type : 필드 값이 1500이하면 데이터 필드의 데이터 크기를 의미하는 length로 해석 그렇지 않으면 type으로 해석함. if 1500 이상이다, 분할과정이루어져야함. ㅇㅇ
5) 체크섬 : 4바이트 크기. 데이터 전송 과정에서, 데이터 변형 오류의 발생여부를 수신 호스트가 확일 할 수 있도록 송신호스트가 값을 기록해줌(CRC)

3- LLC 프레임 캡슐화
각 계층의 프로토콜이 정의한 헤더 정보를 계속 추가~> 이더넷 데이터 ㅎㅎ


4- 허브와 스위치
트랜시버 -> 허브에 호스트를 잭으로 연결

이더넷 환경  
버스 : 모든 호스트 공유  //  허브 : 외부로 보면 스타형 구조이나, 내부는 버스형임. 그러나 충돌이 많이 일어 날 수 있다. 그래서,,
스위치 허브 : 일반 허브와 형태가 동일하나, 성능면에서 장점이 있음. 스위치 기능이 있어 임의의 호스트로 부터 수신한 프레임을 모든 호스트에 전송안하고 목적지 지정한 호스트에만 전송함.


<3> 토큰 버스 => 우선순위, 프레임을 전송하지 못할 염려
1. 프레임구조 ( LLC 계층에서 내려온 LLC 프레임을 물리계층을 통해 수신 호스트에 전달하려면 토큰 버스 프로토콜에서 정의한 프레임에 맞게 토큰 버스 프레임을 만들어야함)
1) Premble >=1 , source, destination 6
2) StartDelimeter 1 
3) FrameControl 1 : 데이터 프레임과 토큰 프레임을 구분하기 위한 필드 추가. 데이터 프레임의 경우 프레임 우선순위와 수신 호스트 응답확인시, 제어 프레임의 경우 토큰전달, 링관리 용도
4) EndDelimeter 1 끝 구분자도 추가~

FrameControl 첫 2비트 역할구분
00 제어용 MAC 프레임 //  01 LLC 프레임 // 10 네트워크 관리용 데이터 프레임 // 11 예약(리저브드)

LLC 프레임 캡슐화
토큰 버스 프레임의 데이터 필드에 캡슐화

<4> 토큰링
점대점으로 연결한 호스트가 순환 구조 형태로 LAN을 구성함. 토큰이라 불리는 제어 프레임이 일정한 방향으로 순환함.. ㅎㅎ 토큰있어야 전송가능혀 ㅎㅎ

프레임구조
토큰 링 프레임은 데이터 프레임과 토큰 프레임으로 나눔
토큰 SD AC ED ( 시작, 접근, 끝 구분자)
데이터 SD AC FC destination/source Address Data(크기제한없) checkSum ED FS 
송수신 주소, 데이터 빼고 다 1바이트임... ->  FC 프레임 제어 , FS 프레임 상태 추가..

링에 연결된 호스트 중에는 다른 호스트와 구별되는 특별한 기능을 수행하는 관리호스트, <모니터>(대빵)라고 함. <-일렉션알고리즘

LLC 프레임 캡슐화
프레임구조만 변함. 나머지같음.

프레임 필드의 의미
AC : Acesss Control  
우선순위 비트, 토큰 비트, 모니터 비트, 예약 비트  pppTMrrr이런식.
우선순위 111 >> 000 /  토큰 토큰/일반구분 0은 토큰 프레임 값 / 
모니터 비트 : 모니터 호스트는 데이터 프레임이 자신을 지나 갈 때 M비트를 1로 지정함. M비트가 1인 프레임이 다시 모니터 호스트를 지나가면, 해당 프레임이 1번 이상 지나갔구나 라는 의미가 됨 그럼 
이프레임을 링에서 제거하여 <<무한정 순환 현상>>을 방지한다.

FrameControl FC
TTcccccc : 00) 제어용 맥 프레임 01) LLC 프레임 상위계층에서 전송을 요구한 LLC 프레임 //1 X) 예약

FrameStauts FS
AC00AC00 : 
토큰 링 프레임의 맨 마지막에 위치하여 프레임의 수신 호스트가 송신 호스트에 응답 할 수 있도록함,

A : 목적지로 지정한 호스트에서 자신에게 전달되면 접근했다고 1표시 아니면 그냥 통과~
