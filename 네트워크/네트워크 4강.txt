데이터 전송 방식

자원공유, 병렬처리에 의한 성능 향상, 중복저장으로 신뢰성 향상(시스템 성능은 저하 될 수 있다)
데이터를 전송 시 2Layer에서 주로 이루어지며 딜레이가 걸리는 3번이 있다(작업을 나눌 때 , 해당 데이터를 받거나 보낼 때, 작업을 합칠 때)

교환 : 전달 경로가 2이상 이라면 라우터에서 데이터를 어느 방향으로 보낼지 선택하는 기능임.
전송: 매체에 의하여 일대일로 직접 연결된 두 시스템 간의 신뢰성 있는 데이터 전송을 보장하기 위한 것.


전송방식의 종류

점대점 : WAN, 일대일방식, 부하가 덜 걸리나 시간은 좀 느리다,  송신호스트와 중개호스트와 일대일 연결이 되니, 다른 호스트에게 데이터 전송이 안된다.

브로드캐스팅 : LAN, 일대 다중, 부하가 많이걸리니 소규모 네트워크에서 주로 사용, Fludding



점대점 방식
1) 스타형
중앙에 있는 하나의 중개 호스트 주위(ROOT, central host)로 여러 호스트를 일대일로 연결 tree구조 -> 앵커(하위)지점은 브로딩캐스팅으로 빨리... 
하나의 중앙 호스트가 박살나면 여파가 큼.

2) 링형
순환고리구조이며, 동시에 전송하면 데이터 충돌이 발생한다. 호스트 사이의 데이터 송신 지점을 제어하는 기능이 필요한데, 토큰이라는 특수한 제어 프레임이 이 기능을 수행한다.
중요한건 링에서 호스트하나가 맛탱이 가면 연결이 안되니, 제어 정책을 바꿔줘야 돌아간다.

3) 완전형
모든 호스트가 다른호스트랑 1대1로 모두 연결되어 있게 하는 방식.

4) 불규칙형


브로드캐스팅 방식
호스트가 전송한 데이터가 네트워크에 연결된 모든 호스트에 전달된다는 특징이 있다.( 지정된 호스트는 해당 데이터를 수신, 보관하나 나머지 호스트는 데이터를 버린다!)

1) 버스형

다수의 호스트가 하나의 전송 매체를 공유하니 전송 데이터를 모든 호스트가 수신이 가능하다.
하지만 두 호스트가 동시에 데이터를 보내면 충돌이 일어나는데 어떻게 해결할 것인가?
	호스트의 전송 권한 제한 1: 시간대변환, 제어 토큰!
	호스트의 전송 권한 제한 2: 충돌허용 대표적 이더넷채택 충돌허용

2) 링형
	충돌문제 토큰이용( 토큰이 올때까지 대기...... 왜냐 토큰은 전송권한을 의미하므로 데이터 전송시 확보해야함)


4. 멀티포인트 통신
컴퓨터 통신의 가장 기본적인 형식은 두 호스트 사이의 데이터 전송을 의미하는 유니캐스팅 방식 -> 텔넷, ftp, 웹 검색
하나의 송신호스트 기준으로 수신호스트 하나와 연결되면 유니포인트 , 다수의 호스트와 연결되면 멀티포인트
송신 호스트가 한번의 전송으로 수신 호스트 하나에만 데이터 전송할 수 있으면 유니캐스팅이며, 다수 호스트에 데이터 전송할 수 있다면 멀티캐스팅이다.

4.1
유니캐스팅을 통한 일대다 통신을 하려면 멀티포인트 유니캐스팅방식을 사용 -> 수신호스트가 많아지면 성능이 떨어진다.

4.2
브로드캐스팅 ... 송신호스트가 전송한 데이터가 네트워크에 연결된 모든 호스트에 전송되는 방식 -> 많아지면 트래픽이 급격하게 증가하니 서브넷을 써라!

4.3
멀티 캐스팅 프로토콜 자체에서 일대다 전송기능을 구현한다. 그래서 연결 설정 요구한번으로 지원될수도 있다.




오류지원
데이터링크계층 전송오류 기능지원하며, 데이터가 깨져서 도착하는 프레임변형과 데이터가 목적지에 도착못하는 프레임 분실이 있다.

1) 수신호스트의 응답 프레임 
만약 수신호스트가 오류를 확인하게 되면 데이터프레임을 재전송하도록 요구하는 부정응답 프레임을 주고 잘 도착하면 긍정 응답 프레임을 줌.

2) 송신호스트의 타이머 기능
일정시간 이내에 수신 호스트로부터 긍정 부정 응답 프레임 회신이 없으면 타임아웃 기능을 동작하여 데이터 프레임 재전송

3) 야 그러면 긍정 응답 프레임 분실하면? 어쩔래?
이경우에 수신호스트가 인지 할 수 없으니 다시 재전송요청을 하며 수신호스트가 다시 데이터를 보내고 중복 수신하는 결과를 초래한다. 이러한 중복프레임을 가릴라면 순서번호(시퀀스 넘버)를 기록해야한다.

데이터 프레임은 원래의 데이터 외에 오류 검출을 위한 정보도 함께 제공 -> 수신호스트에선 오류를 감지하는 기능만 하는 정보와 오류와 발생한 프레임을 복구하는 기능을 하는 정보가 있다.

정상적인전송 : 긍정응답 프레임 회신 완료하면 오케이  응답프레임기능이 없다? 타임아웃기능이용
프레임 변형 : 부정응답 프레임 전송 , 긍부정 응답 프레임도 오류가 날 수 있으니 주의가 필요해
프레임 분실 : 없어지면 계속 기다리는거 오바야.. 그니가 시간을 정하자 송신호스트가 타임아웃을 생각해서 수신호스트에게 다시보낸다!
시퀀스 넘버 : 긍정 응답프레임이 분실해서 다시 송신호스트가 재전송 할 때 수신호스트에 보내질 데이터 프레임 별로 구분하기위해 쓴다

흐름제어 : 데이터 프레임의 전송 속도 조절(수신호스트가 감당하도록)
흐름제어 제공 안하면 데이터 프레임을 내부 버퍼에 보관할 여유가 없어.. 그럼 버퍼에 보관못하니, 도착한 프레임이 분실되는 결과가 나올수 있지.. 그 이후에는 재전송해서 오류 복구해야함. ex)슬라이딩 윈도우 프로토콜



프레임
데이터링크 계층에서는 전송 데이터를 프레임이라는 작은 단위로 처리(체크섬이란? 상위계층에서 보낸 전송 데이터의 오류확인, 프레임 변형 오류가 되었는가?)

프레임내부 정보 표현방식 2가지
=> 시작과 끝을 구분!!!1
1) 문자프레임 : 프레임 내용이 문자로 구성, 문자 데이터 전송 시 사용(8bit 고정크기)
하나의 프레임 단위 구분 위한 프레임의 앞뒤에 아스키 코드 특수문자 사용 (DLE, STX 문자를 앞 뒤로 추가한다  그 사이에는 프로토콜에서 정의한 제어 정보와 전송 데이터를 포함)
야 그러면 중간에 DLE, STX같이 있으면 전송에 문제되지 않냐? 맞아... 혼선을 주게 돼.. (실행파일 같은 이진 코드 데이터 경우 발생확률 높음)
-> 그래서 내가 나왔다 <문자스터핑 : 문자프레임 전송과정에서 제어 문자를 추가하는 기능!>
야 처음시작 빼고 중간에 DLE문자 있으면 뒤에 하나 DLE 강제로 하나 붙여서 추가시켜. -> 수신호스트는 임의로 추가한 걸 판단해서 네트웤 계층에 전달 되기전 추가한것 또는 그앞에 있는DLE문자를 삭제해야함.

2) 비트 프레임 : 프레임을 문자로 안하고 비트 패턴(01) 데이터로 전송하는 방식(앞뒤에 특수하게 정의된 01111110 사용
-> 내부에 똑같은 방식이 있을 수 있으니.. 비트 스터핑<얘는 1이 5번 발생한다? 1번 5번 연속한 뒤에 0을 붙인다. 그럼 6개 미만이 되니 원천적으로 차단하며 수신호스트는 송신 과정에서 추가된 0을 제거하여 원래의 데이터를 네트웤에 전달.


다항코드

프레임 전송 과정에서 발생하는 오류의 극복 방법은 2개임
하나는 전송 프레임에 오류 검출 코드를 넣어서 수신 호스트가 전송 과정의 오률 검출하도록 하는 것임 -> 재전송 , 역방향 오류 복구(ARQ)
둘은 프레임자체에 오류복구코드(해밍코드)를 넣어서 오류 검출과 복구 기능을 모두 수행

오류 검출
패리티 비트:
8비트중 아스키코드 7비트를 제외한 하나의 비트를 통한 오류 검출 => 짝수패리티, 홀수패리티가 있는데, 데이터 끝에 0또는 1을 추가해서 패리티비트를 구분한다.
하지만 이방식은 짝수개의 오류가 발생하면 오류검출이 제대로 안된다.

그래서 나온게

블록검사
여러개의 바이트를 하나의 블록으로 구성한 후 교차 검사를 함.-> 오류 검출 확률을 높임. 그러나 오버헤드가 크며 수평,수직적으로 짝수개의 오류가 발생하면 검출이 제대로 안이루어짐

다항코드(CRC)
버스트에러(네트워크, 특정위치에서 집중적 발생하는 에러)를 잘잡어잉!
다항 코드 방식은 계수가 0과 1로 나눈 다항식 기반으로 함...         
M/G + R : 보낼데이터/생성다항식(다항코드) + 체크섬 => 보낼데이터뒤에 체크섬을 이어붙임. 또한 나눌때 배타적 논리합 방식을 쓴다.(Exclusive OR) 

