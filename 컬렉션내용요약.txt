colletion - Iterator인터페이스를 상속하고,
이러한 컬렉션을 상속하는 list, queue(deque), set 과 상속하지 않는 Map이라는 인터페이스를 설명한다.

list 인터페이스를 상속하는 ArrayList<E>와 LinkedList<E>가 있다.
1) ArrayList<E>
	add를 써서 추가한다. 배열은 삭제와 넣기가 까다롭다 왜냐면 전 배열구간이 이동하기 때문...
List<String> list = new ArrayList<>();
Iterator<T> iter = list.iterator(); //
iter.hasNext() iter.next();  -> enhanced for문.
ListIterator<String> diter = list.listIterator() ; // 양방향 반복자. previous() ....
만약 인스턴스를 넣고 초기화를 시키고 싶다?
List<String> list = Arrays.asList("123","keee","kkkk");
list = new ArrayList<>(list);

3) LinkedList<E>
	내부구조 리스트... 연결과 삭제가 용이하나 찾는데 오래걸릴 수가 있다.


Set 인터페이스를 상속하는 HashSet, TreeSet이 있음.
Set은 동일한 인스턴스를 넣는다면 중복된 값을 추가시키지 않는다.
1. HashSet

어떠한 정보를 이용해 해쉬값을 가져서, 그 해쉬값으로 해쉬코드를 얻은다음 해당해쉬코드는 리스트 배열의 인덱스이다. 그래서 직접 접근하여 그 리스트 목록에 작업을한다.
HashSet의 경우. Object의 int hashCode에서 해쉬 값->코드를 정하고 인덱스에 접근한다음. 그 인덱스의 리스트 인스턴스를 돌아가면 equals메소드를 호출하며 비교한당
얘도 반복자 사용가능하며 함수이름은 list와 같다.

2. TreeSet
정렬방식이 오름차순인 Set임.

comparator<T> 클래스를 하나 만들어서 int compare로 정렬을 정의한다음 TreeSet<>(new comparaotr클래스를 하나 생성)해서 정렬기준을 마련해준다.


Queue 인터페이스를 상속하는 Queue가 있습니당.
큐같은 경우 선입선출 자료구조임.
Queue는 내부를 array로할지 LinkedList로 할지 결정함.
Queue<String> que = new ArrayList<>();
메소드.
add, remove, element는 예외처리 알고리즘을 정의해줌 VS offer, poll peek은 안해주고 상황을 T or F로 알려준당.

스택은 Deque를 이용해서 활용합니다.
솔직히 양방향이긴한데 자바에선 Deque를 이용해서 씁니다. 후입선출.
offerFirst 처음 칸에 인스턴스넣음 pollFirst 처음 칸의 인스턴스를 가져오면서 해당 첫 인스턴스 제거.

맵은 일단 collection이랑 별개이고 Iterator도 상속안함. 그렇기 때문에 반복자 못 씀
HashMap과 TreeMap있는데 HashMap을 주로.
map.put(키, 해당 정보); 추가		map.get(키) 키값에 해당하는 정보 가져옴. 없으면 null

근데 반복자를 쓰고싶다..........
그럼 map.keySet(); 함수를 써보자
이함수는 클래스가 갖고있는 키들을 모우모아서 Set형태 인스턴스로 반환해준다.

반복자를 쓸수있쥬



11